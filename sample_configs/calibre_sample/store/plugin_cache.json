{
  "ebookshoppe_uk": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass EBookShoppeUKStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url_details = 'http://www.awin1.com/cread.php?awinmid=1414&awinaffid=120917&clickref=&p={0}'\n        url = 'http://www.awin1.com/awclick.php?mid=2666&id=120917'\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.ebookshoppe.com/search.php?search_query=' + urllib2.quote(query)\n        br = browser()\n        br.addheaders = [(\"Referer\", \"http://www.ebookshoppe.com/\")]\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//ul[@class=\"ProductList\"]/li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/'\n                                        'strong/a/@href')).strip()\n                if not id:\n                    continue\n                cover_url = ''.join(data.xpath('./div[@class=\"ProductImage\"]/a/img/@src'))\n                title = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/strong/a/text()'))\n                price = ''.join(data.xpath('./div[@class=\"ProductPriceRating\"]/em/text()'))\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.detail_item = id\n\n                self.get_author_and_formats(s, timeout)\n                if not s.author:\n                    continue\n\n                yield s\n\n    def get_author_and_formats(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            author = ''.join(idata.xpath('//div[@id=\"ProductOtherDetails\"]/dl/dd[1]/text()'))\n            if author:\n                search_result.author = author\n            formats = idata.xpath('//dl[@class=\"ProductAddToCart\"]/dd/'\n                                  'ul[@class=\"ProductOptionList\"]/li/label/text()')\n            if formats:\n                search_result.formats = ', '.join(formats)\n            search_result.drm = SearchResult.DRM_UNKNOWN\n        return True\n", 
  "amazon_ca": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 7  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.ca/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nDETAILS_URL = 'https://amazon.ca/dp/'\nSTORE_LINK =  'https://www.amazon.ca'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"Kindle Edition\"]/@title'\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"by \")]/following-sibling::span//text()'\n            price_xpath = ('descendant::div[@class=\"a-row a-spacing-none\" and'\n                           ' not(span[contains(@class, \"kindle-unlimited\")])]//span[contains(@class, \"s-price\")]//text()')\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "amazon_de": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 15  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.de/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nBY = 'von'\nKINDLE_EDITION = 'Kindle Edition'\nDETAILS_URL = 'https://amazon.de/dp/'\nSTORE_LINK =  'https://www.amazon.de'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[contains(text(), \"%s\")]//text()' % KINDLE_EDITION\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"%s \")]/following-sibling::span//text()' % BY\n            price_xpath = ('descendant::div[@class=\"a-row a-spacing-none\" and'\n                           ' not(span[contains(@class, \"kindle-unlimited\")])]//span[contains(@class, \"s-price\")]//text()')\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "amazon": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 14  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.com/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nDETAILS_URL = 'https://amazon.com/dp/'\nSTORE_LINK =  'https://www.amazon.com/Kindle-eBooks'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[contains(text(), \"Kindle Edition\")]//text()'\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"by \")]/following-sibling::span//text()'\n            price_xpath = 'descendant::span[contains(@class, \"sx-price\")]/../@aria-label'\n        elif 'grid' in results.get('class', ''):\n            data_xpath = '//div[contains(@class, \"prod\")]'\n            format_xpath = (\n                    './/ul[contains(@class, \"rsltGridList\")]'\n                    '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n            asin_xpath = '@name'\n            cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n            title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n            author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n            price_xpath = (\n                    './/ul[contains(@class, \"rsltGridList\")]'\n                    '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n        elif 'ilresults' in results.get('class', ''):\n            data_xpath = '//li[(@class=\"ilo\")]'\n            format_xpath = (\n                    './/ul[contains(@class, \"rsltGridList\")]'\n                    '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n            asin_xpath = '@name'\n            cover_xpath = './div[@class = \"ilf\"]/a/img[contains(@class, \"ilo\")]/@src'\n            title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n            author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n            # Results can be in a grid (table) or a column\n            price_xpath = (\n                    './/ul[contains(@class, \"rsltL\") or contains(@class, \"rsltGridList\")]'\n                    '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n        elif 'list' in results.get('class', ''):\n            data_xpath = '//div[contains(@class, \"prod\")]'\n            format_xpath = (\n                    './/ul[contains(@class, \"rsltL\")]'\n                    '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n            asin_xpath = '@name'\n            cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n            title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n            author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n            price_xpath = (\n                    './/ul[contains(@class, \"rsltL\")]'\n                    '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "kobo": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 7  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html, etree\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.ebooks.metadata import authors_to_string\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef search_kobo(query, max_results=10, timeout=60, write_html_to=None):\n    from css_selectors import Select\n    url = 'https://www.kobobooks.com/search/search.html?q=' + urllib.quote_plus(query)\n\n    br = browser()\n\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        select = Select(doc)\n        for i, item in enumerate(select('.result-items .item-wrapper.book')):\n            if i == max_results:\n                break\n            for img in select('.item-image img[src]', item):\n                cover_url = img.get('src')\n                if cover_url.startswith('//'):\n                    cover_url = 'https:' + cover_url\n                break\n            else:\n                cover_url = None\n\n            for p in select('p.title', item):\n                title = etree.tostring(p, method='text', encoding=unicode).strip()\n                for a in select('a[href]', p):\n                    url = a.get('href')\n                    break\n                else:\n                    url = None\n                break\n            else:\n                title = None\n\n            authors = []\n            for a in select('p.contributor-list a.contributor-name', item):\n                authors.append(etree.tostring(a, method='text', encoding=unicode).strip())\n            authors = authors_to_string(authors)\n\n            for p in select('p.price', item):\n                price = etree.tostring(p, method='text', encoding=unicode).strip()\n                break\n            else:\n                price = None\n\n            if title and authors and url:\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title\n                s.author = authors\n                s.price = price\n                s.detail_item = url\n                s.formats = 'EPUB'\n                s.drm = SearchResult.DRM_UNKNOWN\n\n                yield s\n\n\nclass KoboStore(BasicStoreConfig, StorePlugin):\n\n    minimum_calibre_version = (2, 21, 0)\n\n    def open(self, parent=None, detail_item=None, external=False):\n        pub_id = '0dsO3kDu/AU'\n        murl = 'https://click.linksynergy.com/fs-bin/click?id=%s&subid=&offerid=280046.1&type=10&tmpid=9310&RD_PARM1=http%%3A%%2F%%2Fkobo.com' % pub_id\n\n        if detail_item:\n            purl = 'https://click.linksynergy.com/link?id=%s&offerid=280046&type=2&murl=%s' % (pub_id, urllib.quote_plus(detail_item))\n            url = purl\n        else:\n            purl = None\n            url = murl\n\n        if external or self.config.get('open_external', False):\n            open_url(url_slash_cleaner(url))\n        else:\n            d = WebStoreDialog(self.gui, murl, parent, purl)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_kobo(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            search_result.author = ', '.join(idata.xpath('.//h2[contains(@class, \"author\")]//a/text()'))\n            if idata.xpath('boolean(//div[@class=\"bookitem-secondary-metadata\"]//li[contains(text(), \"Download options\")])'):\n                if idata.xpath('boolean(//div[@class=\"bookitem-secondary-metadata\"]//li[contains(text(), \"DRM-Free\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                if idata.xpath('boolean(//div[@class=\"bookitem-secondary-metadata\"]//li[contains(text(), \"Adobe DRM\")])'):\n                    search_result.drm = SearchResult.DRM_LOCKED\n            else:\n                search_result.drm = SearchResult.DRM_UNKNOWN\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_kobo(' '.join(sys.argv[1:]), write_html_to='/t/kobo.html'):\n        print (result)\n", 
  "amazon_fr": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 15  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.fr/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nBY = 'de'\nKINDLE_EDITION = 'Format Kindle'\nDETAILS_URL = 'https://amazon.fr/dp/'\nSTORE_LINK =  'https://www.amazon.fr'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"%s\"]/@title' % KINDLE_EDITION\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"%s \")]/following-sibling::span//text()' % BY\n            price_xpath = 'descendant::span[contains(@class, \"s-price\")]//text()'\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "virtualo": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 9  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2017, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom base64 import b64encode\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass VirtualoStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/12/58/'\n\n        url = 'http://virtualo.pl/ebook/c2/'\n\n        aff_url = aff_root + str(b64encode(url))\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + str(b64encode(detail_item))\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=12, timeout=60):\n        url = 'http://virtualo.pl/?q=' + urllib.quote(query)\n\n        br = browser()\n        no_drm_pattern = re.compile(r'Watermark|Brak')\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@class=\"products-list-wrapper\"]//li[@class=\"product \"]'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//div[@class=\"cover-wrapper\"]//a/@href')).split(r'?q=')[0]\n                if not id:\n                    continue\n\n                price = ''.join(data.xpath('.//div[@class=\"information\"]//div[@class=\"price\"]/text()'))\n                cover_url = ''.join(data.xpath('.//img[@class=\"cover\"]/@src'))\n                title = ''.join(data.xpath('.//div[@class=\"title\"]/a//text()'))\n                author = ', '.join(data.xpath('.//div[@class=\"information\"]//div[@class=\"authors\"]/a//text()'))\n                formats = [form.strip() for form in data.xpath('.//div[@class=\"information\"]//div[@class=\"format\"]/a//text()')]\n                nodrm = no_drm_pattern.search(''.join(data.xpath('.//div[@class=\"protection\"]/text()')))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = re.sub('\\.',',',price.strip())\n                s.detail_item = id\n                s.formats = ', '.join(formats).upper()\n                s.drm = SearchResult.DRM_UNLOCKED if nodrm else SearchResult.DRM_LOCKED\n\n                yield s\n", 
  "amazon_es": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 15  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.es/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nBY = 'de'\nKINDLE_EDITION = 'Versi\u00f3n Kindle'\nDETAILS_URL = 'https://amazon.es/dp/'\nSTORE_LINK =  'https://www.amazon.es'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"%s\"]/@title' % KINDLE_EDITION\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"%s \")]/following-sibling::span//text()' % BY\n            price_xpath = ('descendant::div[@class=\"a-row a-spacing-none\" and'\n                           ' not(span[contains(@class, \"kindle-unlimited\")])]//span[contains(@class, \"s-price\")]//text()')\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "amazon_au": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 5  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.com.au/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nDETAILS_URL = 'https://amazon.com.au/dp/'\nSTORE_LINK =  'https://www.amazon.com.au'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"Kindle Edition\"]/@title'\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"by \")]/following-sibling::span//text()'\n            price_xpath = ('descendant::div[@class=\"a-row a-spacing-none\" and'\n                           ' not(span[contains(@class, \"kindle-unlimited\")])]//span[contains(@class, \"s-price\")]//text()')\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "amazon_in": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 5  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.in/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nDETAILS_URL = 'https://amazon.in/dp/'\nSTORE_LINK =  'https://www.amazon.in'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"Kindle Edition\"]/@title'\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"by \")]/following-sibling::span//text()'\n            price_xpath = ('descendant::div[@class=\"a-row a-spacing-none\" and'\n                           ' not(span[contains(@class, \"kindle-unlimited\")])]//span[contains(@class, \"s-price\")]//text()')\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            if s.price:\n                s.price = '\u20b9 ' + s.price\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "baen_webscription": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 2  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom urllib import urlencode\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.ebooks.metadata import authors_to_string\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\ndef search(query, max_results=10, timeout=60):\n    url = 'http://www.baen.com/catalogsearch/result/?' + urlencode(\n        {'q':query.lower(), 'dir':'desc', 'order':'relevance'})\n\n    br = browser()\n\n    counter = max_results\n    with closing(br.open_novisit(url, timeout=timeout)) as f:\n        raw = f.read()\n        root = html.fromstring(raw)\n        for data in root.xpath('//div[@id=\"productMatches\"]//table[@id=\"authorTable\"]//tr[contains(@class, \"IDCell\")]'):\n            if counter <= 0:\n                break\n\n            try:\n                book_url = data.xpath('./td[1]/a/@href[1]')[0]\n            except IndexError:\n                continue\n\n            try:\n                title = data.xpath('./td[2]/a[1]/text()')[0].strip()\n            except IndexError:\n                continue\n            try:\n                cover_url = data.xpath('./td[1]//img[1]/@src')[0]\n            except IndexError:\n                cover_url = ''\n\n            tails = [(b.tail or '').strip() for b in data.xpath('./td[2]/br')]\n            authors = [x[2:].strip() for x in tails if x.startswith('by ')]\n            author = authors_to_string(authors)\n            price = ''.join(data.xpath('.//span[@class=\"variantprice\"]/text()'))\n            a, b, price = price.partition('$')\n            price = b + price\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price\n            s.detail_item = book_url.strip()\n            s.drm = SearchResult.DRM_UNLOCKED\n            s.formats = 'RB, MOBI, EPUB, LIT, LRF, RTF, HTML'\n\n            yield s\n\n\nclass BaenWebScriptionStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://www.baenebooks.com/'\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(detail_item or url))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item or url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search(query, max_results, timeout):\n            yield result\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search(' '.join(sys.argv[1:])):\n        print(result)\n", 
  "ebooks_com": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 3  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass EbookscomStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        m_url = 'http://www.dpbolvw.net/'\n        h_click = 'click-4913808-10364500'\n        d_click = 'click-4913808-10281551'\n\n        url = m_url + h_click\n        detail_url = None\n        if detail_item:\n            detail_url = m_url + d_click + detail_item\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.ebooks.com/SearchApp/SearchResults.net?term=' + urllib.quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@id=\"results\"]//li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//a[1]/@href'))\n                mo = re.search('\\d+', id)\n                if not mo:\n                    continue\n                id = mo.group()\n\n                cover_url = ''.join(data.xpath('.//div[contains(@class, \"img\")]//img/@src'))\n\n                title = ''.join(data.xpath(\n                    'descendant::span[@class=\"book-title\"]/a/text()')).strip()\n                author = ', '.join(data.xpath(\n                    'descendant::span[@class=\"author\"]/a/text()')).strip()\n                if not title or not author:\n                    continue\n\n                price = ''.join(data.xpath(\n                    './/span[starts-with(text(), \"US$\") or'\n                    ' starts-with(text(), \"\u20ac\") or starts-with(text(), \"CA$\") or'\n                    ' starts-with(text(), \"AU$\") or starts-with(text(), \"\u00a3\")]/text()')).strip()\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price.strip()\n                s.detail_item = '?url=http://www.ebooks.com/cj.asp?IID=' + id.strip() + '&cjsku=' + id.strip()\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        url = 'http://www.ebooks.com/ebooks/book_display.asp?IID='\n\n        mo = re.search(r'\\?IID=(?P<id>\\d+)', search_result.detail_item)\n        if mo:\n            id = mo.group('id')\n        if not id:\n            return\n\n        br = browser()\n        with closing(br.open(url + id, timeout=timeout)) as nf:\n            pdoc = html.fromstring(nf.read())\n\n            search_result.drm = SearchResult.DRM_UNLOCKED\n            permissions = ' '.join(pdoc.xpath('//div[@class=\"permissions-items\"]//text()'))\n            if 'off' in permissions:\n                search_result.drm = SearchResult.DRM_LOCKED\n\n            fdata = pdoc.xpath('//div[contains(@class, \"more-links\") and contains(@class, \"more-links-info\")]/div//span/text()')\n            if len(fdata) > 1:\n                search_result.formats = ', '.join(fdata[1:])\n\n        return True\n", 
  "ozon_ru": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 3  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2013, Roman Mukhin <ramses_ru at hotmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.ebooks.chardet import xml_to_unicode\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nshop_url = 'http://www.ozon.ru'\n\n\ndef parse_html(raw):\n    try:\n        from html5_parser import parse\n    except ImportError:\n        # Old versions of calibre\n        import html5lib\n        return html5lib.parse(raw, treebuilder='lxml', namespaceHTMLElements=False)\n    else:\n        return parse(raw)\n\n\ndef search(query, max_results=15, timeout=60):\n    url = 'http://www.ozon.ru/?context=search&text=%s&store=1,0&group=div_book' % urllib.quote_plus(query)\n\n    counter = max_results\n    br = browser()\n\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = xml_to_unicode(f.read(), strip_encoding_pats=True, assume_utf8=True)[0]\n        root = parse_html(raw)\n        for tile in root.xpath('//*[@class=\"bShelfTile inline\"]'):\n            if counter <= 0:\n                break\n            counter -= 1\n\n            s = SearchResult(store_name='OZON.ru')\n            s.detail_item = shop_url + tile.xpath('descendant::a[@class=\"eShelfTile_Link\"]/@href')[0]\n            s.title = tile.xpath('descendant::span[@class=\"eShelfTile_ItemNameText\"]/@title')[0]\n            s.author = tile.xpath('descendant::span[@class=\"eShelfTile_ItemPerson\"]/@title')[0]\n            s.price = ''.join(tile.xpath('descendant::div[contains(@class, \"eShelfTile_Price\")]/text()'))\n            s.cover_url = 'http:' + tile.xpath('descendant::img/@data-original')[0]\n            s.price = format_price_in_RUR(s.price)\n            yield s\n\n\nclass OzonRUStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = detail_item or shop_url\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(url)))\n        else:\n            d = WebStoreDialog(self.gui, shop_url, parent, url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=15, timeout=60):\n        for s in search(query, max_results=max_results, timeout=timeout):\n            yield s\n\n\ndef format_price_in_RUR(price):\n    '''\n    Try to format price according ru locale: '12 212,34 \u0440\u0443\u0431.'\n    @param price: price in format like 25.99\n    @return: formatted price if possible otherwise original value\n    @rtype: unicode\n    '''\n    price = price.replace('\\xa0', '').replace(',', '.').strip() + ' py6'\n    return price\n\n\nif __name__ == '__main__':\n    import sys\n    for r in search(sys.argv[-1]):\n        print(r)\n", 
  "publio": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 7  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2012-2017, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass PublioStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        google_analytics = '?utm_source=tdcalibre&utm_medium=calibre'\n        url = 'http://www.publio.pl/' + google_analytics\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner((detail_item + google_analytics) if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item if detail_item else url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=20, timeout=60):\n\n        br = browser()\n\n        counter = max_results\n        page = 1\n        while counter:\n            with closing(br.open('http://www.publio.pl/e-booki,strona' + str(page) + '.html?q=' + urllib.quote(query), timeout=timeout)) as f:  # noqa\n                doc = html.fromstring(f.read())\n                for data in doc.xpath('//div[@class=\"products-list\"]//div[@class=\"product-tile\"]'):\n                    if counter <= 0:\n                        break\n\n                    id = ''.join(data.xpath('.//a[@class=\"product-tile-cover\"]/@href'))\n                    if not id:\n                        continue\n\n                    cover_url = ''.join(data.xpath('.//img[@class=\"product-tile-cover-photo\"]/@src'))\n                    title = ''.join(data.xpath('.//span[@class=\"product-tile-title-long\"]/text()'))\n                    author = ', '.join(data.xpath('.//span[@class=\"product-tile-author\"]/a/text()'))\n                    price = ''.join(data.xpath('.//div[@class=\"product-tile-price-wrapper \"]/a/ins/text()'))\n                    # formats = ', '.join([x.strip() for x in data.xpath('.//div[@class=\"formats\"]/a/text()')])\n\n                    counter -= 1\n\n                    s = SearchResult()\n                    s.cover_url = 'http://www.publio.pl' + cover_url\n                    s.title = title.strip()\n                    s.author = author\n                    s.price = price\n                    s.detail_item = 'http://www.publio.pl' + id.strip()\n                    # s.drm = SearchResult.DRM_LOCKED if 'DRM' in formats else SearchResult.DRM_UNLOCKED\n                    # s.formats = formats.replace(' DRM','').strip()\n\n                    yield s\n                if not doc.xpath('boolean(//a[@class=\"next\"])'):\n                    break\n                page+=1\n", 
  "amazon_uk": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 15  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.co.uk/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nDETAILS_URL = 'https://amazon.co.uk/dp/'\nSTORE_LINK =  'https://www.amazon.co.uk'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[contains(text(), \"Kindle Edition\")]//text()'\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"by \")]/following-sibling::span//text()'\n            price_xpath = ('descendant::div[@class=\"a-row a-spacing-none\" and'\n                           ' not(span[contains(@class, \"kindle-unlimited\")])]//span[contains(@class, \"s-price\")]//text()')\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n", 
  "ebook_nl": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 2  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\n\nclass EBookNLStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://www.ebook.nl/'\n        url_details = ('http://www.ebook.nl/store/{0}')\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = ('http://www.ebook.nl/store/advanced_search_result.php?keywords=' + urllib2.quote(query))\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@id=\"books\"]/div[@itemtype=\"http://schema.org/Book\"]'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./meta[@itemprop=\"url\"]/@content')).strip()\n                if not id:\n                    continue\n                cover_url = 'http://www.ebook.nl/store/' + ''.join(data.xpath('.//img[@itemprop=\"image\"]/@src'))\n                title = ''.join(data.xpath('./span[@itemprop=\"name\"]/a/text()')).strip()\n                author = ''.join(data.xpath('./span[@itemprop=\"author\"]/a/text()')).strip()\n                if author == '&nbsp':\n                    author = ''\n                price = ''.join(data.xpath('.//span[@itemprop=\"price\"]//text()'))\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.detail_item = id\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            formats = []\n            if idata.xpath('.//div[@id=\"book_detail_body\"]/ul/li[strong[contains(., \"Type\")]]/span[contains(., \"ePub\")]'):\n                if idata.xpath('.//div[@id=\"book_detail_body\"]/ul/li[strong[contains(., \"Type\")]]/span[contains(., \"EPUB3\")]'):\n                    formats.append('EPUB3')\n                else:\n                    formats.append('EPUB')\n            if idata.xpath('.//div[@id=\"book_detail_body\"]/ul/li[strong[contains(., \"Type\")]]/span[contains(., \"Pdf\")]'):\n                formats.append('PDF')\n            search_result.formats = ', '.join(formats)\n\n            if idata.xpath('.//div[@id=\"book_detail_body\"]/ul/li[strong[contains(., \"Type\")]]'\n                           '//span[@class=\"ePubAdobeDRM\" or @class=\"ePubwatermerk\" or'\n                           ' @class=\"Pdfwatermark\" or @class=\"PdfAdobeDRM\"]'):\n                search_result.drm = SearchResult.DRM_LOCKED\n            if idata.xpath('.//div[@id=\"book_detail_body\"]/ul/li[strong[contains(., \"Type\")]]//span[@class=\"ePubzonderDRM\"]'):\n                search_result.drm = SearchResult.DRM_UNLOCKED\n        return True\n", 
  "amazon_it": "#!/usr/bin/env python2\n#\n# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 15  # Needed for dynamic plugin loading\n\nfrom contextlib import closing\nimport urllib\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nSEARCH_BASE_URL = 'https://www.amazon.it/s/'\nSEARCH_BASE_QUERY = {'url': 'search-alias=digital-text'}\nBY = 'di'\nKINDLE_EDITION = 'Formato Kindle'\nDETAILS_URL = 'https://amazon.it/dp/'\nSTORE_LINK =  'https://www.amazon.it'\nDRM_SEARCH_TEXT = 'Simultaneous Device Usage'\nDRM_FREE_TEXT = 'Unlimited'\n\n\ndef get_user_agent():\n    return 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'\n\n\ndef search_amazon(query, max_results=10, timeout=60,\n                  write_html_to=None,\n                  base_url=SEARCH_BASE_URL,\n                  base_query=SEARCH_BASE_QUERY,\n                  field_keywords='field-keywords'\n                  ):\n    uquery = base_query.copy()\n    uquery[field_keywords] = query\n\n    def asbytes(x):\n        if isinstance(x, type('')):\n            x = x.encode('utf-8')\n        return x\n    uquery = {asbytes(k):asbytes(v) for k, v in uquery.iteritems()}\n    url = base_url + '?' + urllib.urlencode(uquery).decode('ascii')\n    br = browser(user_agent=get_user_agent())\n\n    counter = max_results\n    with closing(br.open(url, timeout=timeout)) as f:\n        raw = f.read()\n        if write_html_to is not None:\n            with open(write_html_to, 'wb') as f:\n                f.write(raw)\n        doc = html.fromstring(raw)\n        try:\n            results = doc.xpath('//div[@id=\"atfResults\" and @class]')[0]\n        except IndexError:\n            return\n\n        if 's-result-list-parent-container' in results.get('class', ''):\n            data_xpath = \"descendant-or-self::li[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-result-item ')]\"\n            format_xpath = './/a[@title=\"%s\"]/@title' % KINDLE_EDITION\n            asin_xpath = '@data-asin'\n            cover_xpath =  \"descendant-or-self::img[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-image ')]/@src\"\n            title_xpath = \"descendant-or-self::h2[@class and contains(concat(' ', normalize-space(@class), ' '), ' s-access-title ')]//text()\"\n            author_xpath = './/span[starts-with(text(), \"%s \")]/following-sibling::span//text()' % BY\n            price_xpath = ('descendant::div[@class=\"a-row a-spacing-none\" and'\n                           ' not(span[contains(@class, \"kindle-unlimited\")])]//span[contains(@class, \"s-price\")]//text()')\n        else:\n            return\n\n        for data in doc.xpath(data_xpath):\n            if counter <= 0:\n                break\n\n            # Even though we are searching digital-text only Amazon will still\n            # put in results for non Kindle books (author pages). Se we need\n            # to explicitly check if the item is a Kindle book and ignore it\n            # if it isn't.\n            format = ''.join(data.xpath(format_xpath))\n            if 'kindle' not in format.lower():\n                continue\n\n            # We must have an asin otherwise we can't easily reference the\n            # book later.\n            asin = data.xpath(asin_xpath)\n            if asin:\n                asin = asin[0]\n            else:\n                continue\n\n            cover_url = ''.join(data.xpath(cover_xpath))\n\n            title = ''.join(data.xpath(title_xpath))\n            author = ''.join(data.xpath(author_xpath))\n            try:\n                author = author.split('by ', 1)[1].split(\" (\")[0]\n            except:\n                pass\n\n            price = ''.join(data.xpath(price_xpath))\n\n            counter -= 1\n\n            s = SearchResult()\n            s.cover_url = cover_url.strip()\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price.strip()\n            s.detail_item = asin.strip()\n            s.formats = 'Kindle'\n\n            yield s\n\n\nclass AmazonKindleStore(StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        store_link = (DETAILS_URL + detail_item) if detail_item else STORE_LINK\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        for result in search_amazon(query, max_results=max_results, timeout=timeout):\n            yield result\n\n    def get_details(self, search_result, timeout):\n        url = DETAILS_URL\n\n        br = browser(user_agent=get_user_agent())\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           DRM_SEARCH_TEXT + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               DRM_FREE_TEXT + '\") and contains(b, \"' +\n                               DRM_SEARCH_TEXT + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n\n\nif __name__ == '__main__':\n    import sys\n    for result in search_amazon(' '.join(sys.argv[1:]), write_html_to='/t/amazon.html'):\n        print (result)\n"
}